[
    import std,
    not: std.not,
    rev: std.rev,
    make_tape: [\n -> 
        [\n acc -> match n with
            | 0 -> acc
            | _ -> ^.-1 (n - 1) (acc&0)
        ],
        -1: n []
    ],
    set_nth: [\n l v -> 
        [\l n acc -> match l with
            | [] -> @.rev acc
            | t&h -> ^.-1 t (n - 1) (acc&(if n = 0 then ^.v else h))
        ],
        -1: l n []
    ],
    get_nth: [\n l -> 
        [\l n -> match l with
            | [] -> -1
            | t&h -> if n = 0 then h else (^.-1 t (n - 1))
        ],
        -1: l n
    ],


    tape_length: 10,
    tape: make_tape tape_length,
    index: 0,
    state: [0,1],

    logic: [\n s -> s.0],
    next_state: [\n s -> [^.s.1, ^.s.0 + ^.s.1]],
    next_index: [\n i -> i + 1],

    run: [\tape state index -> 
        !tape,
        nt: ^.set_nth index tape (^.logic (^.get_nth index tape) state),
        ns: ^.next_state (^.get_nth index tape) state,
        ni: ^.next_index (^.get_nth index nt) index,
        if ni >= ^.tape_length then nt
        else (if ni < 0 then nt
        else ^.-1 nt ns ni)
    ],
    run tape state index,
]